<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Image Converter — Bright Blue Theme</title>
  <style>
    :root{
      --blue:#007bff; /* bright blue */
      --bg:#ffffff;
      --muted:#6b7280;
      --rounded:14px;
      font-family: Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
    }*{box-sizing:border-box}
body{margin:0;background:linear-gradient(180deg,var(--bg),#f8fbff);color:#0b1220;}

.container{max-width:980px;margin:24px auto;padding:18px}
.card{background:linear-gradient(180deg,rgba(0,123,255,0.06),rgba(255,255,255,0.85));border:1px solid rgba(0,123,255,0.08);border-radius:16px;padding:16px}

header{display:flex;gap:12px;align-items:center}
.logo{width:56px;height:56px;border-radius:12px;background:var(--blue);display:flex;align-items:center;justify-content:center;color:#fff;font-weight:700;font-size:20px;box-shadow:0 6px 20px rgba(0,123,255,0.12)}
h1{font-size:18px;margin:0}
p.lead{margin:6px 0 0;color:var(--muted);font-size:13px}

.tool{display:grid;grid-template-columns:1fr 360px;gap:16px;margin-top:16px}
@media (max-width:880px){.tool{grid-template-columns:1fr}}

/* left panel */
.left{padding:12px}
.drop{border:2px dashed rgba(0,123,255,0.18);border-radius:12px;padding:14px;text-align:center;background:rgba(255,255,255,0.6)}
.drop.dragover{background:rgba(0,123,255,0.03);border-color:rgba(0,123,255,0.28)}
.drop input{display:none}
.btn{display:inline-block;padding:10px 14px;border-radius:10px;background:var(--blue);color:#fff;text-decoration:none;cursor:pointer;font-weight:600}

.controls{margin-top:14px;display:flex;flex-direction:column;gap:10px}
label{font-size:13px;color:var(--muted);}
select,input[type='number'],.range-wrap{width:100%;padding:8px;border-radius:10px;border:1px solid rgba(11,18,32,0.06);background:#fff}
.row{display:flex;gap:8px}
.row .col{flex:1}

.preview{border-radius:12px;overflow:hidden;border:1px solid rgba(11,18,32,0.04);background:#fff;padding:10px;text-align:center}
.preview img{max-width:100%;height:auto;display:block;margin:0 auto}
.meta{font-size:13px;color:var(--muted);margin-top:8px}

/* right panel */
.right{padding:12px;border-left:1px dashed rgba(11,18,32,0.04)}
@media (max-width:880px){.right{border-left:none;border-top:1px dashed rgba(11,18,32,0.04);margin-top:12px;padding-top:16px}}

.actions{display:flex;gap:8px;flex-wrap:wrap}
.ghost{background:transparent;border:1px solid rgba(11,18,32,0.06);padding:10px 12px;border-radius:10px;cursor:pointer}

footer{margin-top:14px;font-size:12px;color:var(--muted)}

/* small helpers */
.small{font-size:12px;color:var(--muted)}
.hidden{display:none}

  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <header>
        <div class="logo">IC</div>
        <div>
          <h1>Image Converter</h1>
          <p class="lead">Upload, preview, convert and download images — client-side, fast and mobile-friendly.</p>
        </div>
      </header><div class="tool">
    <div class="left">
      <div id="dropzone" class="drop">
        <p id="droptext">Drag & drop an image here or</p>
        <label class="btn" for="fileInput">Choose Image</label>
        <input id="fileInput" type="file" accept="image/*">
        <p class="small">Supported: PNG, JPEG, HEIC (browser support varies), WEBP (if supported). Conversion is done in your browser — files are not uploaded to a server.</p>
      </div>

      <div class="controls">
        <div>
          <label for="format">Output format</label>
          <select id="format">
            <option value="image/jpeg">JPEG (.jpg)</option>
            <option value="image/png">PNG (.png)</option>
            <option value="image/webp">WEBP (.webp)</option>
          </select>
        </div>

        <div>
          <label for="quality">Quality (compression) — <span id="qval">0.8</span></label>
          <div class="range-wrap">
            <input id="quality" type="range" min="0.1" max="1" step="0.01" value="0.8">
          </div>
          <p class="small">Note: quality is used for JPEG and WEBP. PNG is lossless and ignores quality.</p>
        </div>

        <div class="row">
          <div class="col">
            <label for="width">Width (px)</label>
            <input id="width" type="number" min="1" placeholder="Auto">
          </div>
          <div class="col">
            <label for="height">Height (px)</label>
            <input id="height" type="number" min="1" placeholder="Auto">
          </div>
        </div>
        <div class="row">
          <label style="display:flex;align-items:center;gap:8px"><input id="keepAspect" type="checkbox" checked> Keep aspect ratio</label>
        </div>

        <div class="actions">
          <button id="convertBtn" class="btn">Convert & Preview</button>
          <button id="downloadBtn" class="ghost" disabled>Download Converted</button>
          <button id="resetBtn" class="ghost">Reset</button>
        </div>
      </div>

      <div class="meta" id="fileMeta">No file chosen</div>
    </div>

    <aside class="right">
      <div class="preview" id="previewBox">
        <p class="small">Preview</p>
        <img id="previewImage" class="hidden" alt="preview">
        <canvas id="canvas" class="hidden"></canvas>
        <div id="previewInfo" class="meta"></div>
      </div>

      <div style="margin-top:12px">
        <label class="small">Quick actions</label>
        <div style="display:flex;gap:8px;margin-top:8px;flex-wrap:wrap">
          <button id="compress50" class="ghost">Compress 50%</button>
          <button id="toWebp" class="ghost">Convert to WEBP</button>
          <button id="toJpg" class="ghost">Convert to JPG</button>
        </div>
      </div>

      <footer>
        <div><strong>Note:</strong> All conversion happens in-browser. Some formats (e.g., animated GIFs, BMP, or vector formats) may not convert as expected.</div>
      </footer>
    </aside>
  </div>
</div>

  </div>  <script>
    // Elements
    const fileInput = document.getElementById('fileInput');
    const dropzone = document.getElementById('dropzone');
    const droptext = document.getElementById('droptext');
    const format = document.getElementById('format');
    const quality = document.getElementById('quality');
    const qval = document.getElementById('qval');
    const widthInput = document.getElementById('width');
    const heightInput = document.getElementById('height');
    const keepAspect = document.getElementById('keepAspect');
    const convertBtn = document.getElementById('convertBtn');
    const downloadBtn = document.getElementById('downloadBtn');
    const resetBtn = document.getElementById('resetBtn');
    const previewImage = document.getElementById('previewImage');
    const previewInfo = document.getElementById('previewInfo');
    const fileMeta = document.getElementById('fileMeta');
    const canvas = document.getElementById('canvas');

    let originalImage = new Image();
    let originalFile = null;
    let lastBlob = null;

    // Helpers
    function resetAll(){
      originalImage = new Image();
      originalFile = null;
      lastBlob = null;
      previewImage.src = '';
      previewImage.classList.add('hidden');
      previewInfo.textContent = '';
      fileMeta.textContent = 'No file chosen';
      downloadBtn.disabled = true;
      widthInput.value = '';
      heightInput.value = '';
    }

    function humanBytes(bytes){
      if(!bytes) return '0 B';
      const units=['B','KB','MB','GB'];
      let i=0; while(bytes>=1024 && i<units.length-1){ bytes/=1024; i++; }
      return bytes.toFixed(2)+' '+units[i];
    }

    // File load
    async function handleFile(file){
      if(!file) return;
      originalFile = file;
      fileMeta.textContent = `${file.name} • ${humanBytes(file.size)} • ${file.type || 'unknown'}`;

      const dataUrl = await fileToDataURL(file);
      originalImage = new Image();
      originalImage.onload = () => {
        previewImage.src = dataUrl;
        previewImage.classList.remove('hidden');
        previewInfo.textContent = `${originalImage.width} × ${originalImage.height}`;
        // auto-fill width/height
        widthInput.value = originalImage.width;
        heightInput.value = originalImage.height;
      };
      originalImage.src = dataUrl;
    }

    function fileToDataURL(file){
      return new Promise((res,rej)=>{
        const r=new FileReader();
        r.onload = ()=>res(r.result);
        r.onerror = ()=>rej(r.error);
        r.readAsDataURL(file);
      })
    }

    // Drag & drop
    ['dragenter','dragover'].forEach(ev=>{
      dropzone.addEventListener(ev,e=>{e.preventDefault();dropzone.classList.add('dragover');droptext.textContent='Drop image to upload';});
    });
    ['dragleave','drop'].forEach(ev=>{
      dropzone.addEventListener(ev,e=>{dropzone.classList.remove('dragover');droptext.textContent='Drag & drop an image here or';});
    });
    dropzone.addEventListener('drop',e=>{
      e.preventDefault();
      const f = e.dataTransfer.files && e.dataTransfer.files[0];
      if(f) handleFile(f);
    });

    fileInput.addEventListener('change',e=>{
      if(e.target.files && e.target.files[0]) handleFile(e.target.files[0]);
    });

    // Quality display
    quality.addEventListener('input',()=>{ qval.textContent = quality.value; });

    // Maintain aspect ratio (keep sync)
    widthInput.addEventListener('input',()=>{
      if(!originalImage.width) return;
      if(keepAspect.checked){
        const w = parseInt(widthInput.value) || originalImage.width;
        const h = Math.round(w * (originalImage.height / originalImage.width));
        heightInput.value = h;
      }
    });
    heightInput.addEventListener('input',()=>{
      if(!originalImage.height) return;
      if(keepAspect.checked){
        const h = parseInt(heightInput.value) || originalImage.height;
        const w = Math.round(h * (originalImage.width / originalImage.height));
        widthInput.value = w;
      }
    });

    // Convert function
    async function convertImage(){
      if(!originalImage.src) { alert('Please choose an image first.'); return; }

      const outType = format.value;
      let q = parseFloat(quality.value);
      if(isNaN(q)) q = 0.8;

      const targetW = parseInt(widthInput.value) || originalImage.width;
      const targetH = parseInt(heightInput.value) || originalImage.height;

      // Draw to canvas
      canvas.width = targetW;
      canvas.height = targetH;
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0,0,canvas.width,canvas.height);
      // draw with smoothing
      ctx.imageSmoothingEnabled = true;
      ctx.imageSmoothingQuality = 'high';
      ctx.drawImage(originalImage, 0, 0, targetW, targetH);

      // toBlob supports quality for 'image/jpeg' and 'image/webp'
      const blob = await new Promise((res)=>{
        // fallback for browsers that don't support the mimeType: try default to PNG
        try{
          canvas.toBlob(b=>res(b), outType, (outType === 'image/png') ? undefined : q);
        }catch(err){
          // try png
          canvas.toBlob(b=>res(b), 'image/png');
        }
      });

      if(!blob){ alert('Conversion failed — your browser may not support the requested output format. Try choosing PNG or JPEG.'); return; }

      lastBlob = blob;
      const blobUrl = URL.createObjectURL(blob);
      previewImage.src = blobUrl;
      previewImage.classList.remove('hidden');
      previewInfo.textContent = `${targetW} × ${targetH} • ${humanBytes(blob.size)} • ${outType.split('/')[1]}`;

      // enable download
      downloadBtn.disabled = false;
      downloadBtn.onclick = ()=>downloadBlob(blob, generateDownloadName(originalFile?.name || 'converted', outType));
    }

    function generateDownloadName(originalName, mime){
      const base = (originalName || 'image').replace(/\.[^.]*$/, '');
      const ext = mime.split('/')[1] || 'png';
      return `${base}-converted.${ext}`;
    }

    function downloadBlob(blob, filename){
      const a = document.createElement('a');
      const url = URL.createObjectURL(blob);
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      a.remove();
      setTimeout(()=>URL.revokeObjectURL(url), 2000);
    }

    // UI bindings
    convertBtn.addEventListener('click', async ()=>{
      convertBtn.textContent = 'Converting...';
      convertBtn.disabled = true;
      try{ await convertImage(); }
      catch(e){ console.error(e); alert('Error converting image: '+e.message); }
      convertBtn.disabled = false;
      convertBtn.textContent = 'Convert & Preview';
    });

    resetBtn.addEventListener('click', ()=>{ resetAll(); });

    // Quick actions
    document.getElementById('compress50').addEventListener('click', ()=>{
      quality.value = Math.max(0.1, (parseFloat(quality.value)||0.8) * 0.5);
      qval.textContent = quality.value;
      if(!originalImage.src) return; convertBtn.click();
    });
    document.getElementById('toWebp').addEventListener('click', ()=>{ format.value='image/webp'; if(!originalImage.src) return; convertBtn.click(); });
    document.getElementById('toJpg').addEventListener('click', ()=>{ format.value='image/jpeg'; if(!originalImage.src) return; convertBtn.click(); });

    // Initialize
    resetAll();
  </script></body>
</html>
